#!/usr/bin/env python3

import gi

gi.require_version("Gst", "1.0")
gi.require_version("SpielProvider", "0.1")
from gi.repository import GLib, Gst, SpielProvider

from dasbus.connection import SessionMessageBus
from dasbus.unix import GLibServerUnix
from dasbus.server.property import PropertiesInterface
from xml.dom.minidom import parse, parseString
import re
import os
from os import getcwd
from sys import argv

Gst.init(None)

NAME = argv[-1] if len(argv) > 1 else "mock"

AUTOEXIT = NAME == "mock3"

VOICES = {
    "mock": [
        {
            "name": "Chinese (Cantonese)",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "sit/yue",
            "features": SpielProvider.VoiceFeature.SSML_SAY_AS_CARDINAL
            | SpielProvider.VoiceFeature.SSML_SAY_AS_ORDINAL,
            "languages": ["yue", "zh-yue", "zh"],
        },
        {
            "name": "Armenian (East Armenia)",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "ine/hy",
            "features": 0,
            "languages": ["hy", "hy-arevela"],
        },
    ],
    "mock2": [
        {
            "name": "Armenian (West Armenia)",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "ine/hyw",
            "features": 0,
            "languages": ["hyw", "hy-arevmda", "hy"],
        },
        {
            "name": "English (Scotland)",
            "output_format": "nuthin",
            "identifier": "gmw/en-GB-scotland#misconfigured",
            "features": 0,
            "languages": ["en-gb-scotland", "en"],
        },
        {
            "name": "English (Lancaster)",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "gmw/en-GB-x-gbclan",
            "features": 0,
            "languages": ["en-gb-x-gbclan", "en-gb", "en"],
        },
        {
            "name": "English (America)",
            "output_format": "audio/x-spiel,format=S16LE,channels=1,rate=22050",
            "identifier": "gmw/en-US",
            "features": 0,
            "languages": ["en-us", "en"],
        },
        {
            "name": "English (Great Britain)",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "gmw/en",
            "features": 0,
            "languages": ["en-gb", "en"],
        },
    ],
    "mock3": [
        {
            "name": "Uzbek",
            "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "identifier": "trk/uz",
            "features": 0,
            "languages": ["uz"],
        },
    ],
}


class RawSynthStream(object):
    def __init__(self, fd, text, indefinite, silent):
        elements = [
            "audiotestsrc num-buffers=%d wave=%s name=src"
            % (-1 if indefinite else 10, "silence" if silent else "sine"),
            "audioconvert",
            "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "fdsink name=sink",
        ]
        self._pipeline = Gst.parse_launch(" ! ".join(elements))
        self._pipeline.get_by_name("sink").set_property("fd", fd)
        bus = self._pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect("message::eos", self._on_eos)

    def start(self):
        self._pipeline.set_state(Gst.State.PLAYING)

    def end(self):
        src = self._pipeline.get_by_name("src")
        src.set_state(Gst.State.NULL)
        raw_fd = self._pipeline.get_by_name("sink").get_property("fd")
        os.close(raw_fd)

    def _on_eos(self, *args):
        src = self._pipeline.get_by_name("src")
        raw_fd = self._pipeline.get_by_name("sink").get_property("fd")
        os.close(raw_fd)
        src.set_state(Gst.State.NULL)


class SpielSynthStream(object):
    def __init__(self, fd, text, indefinite, silent):
        self.ranges = ranges = [
            [m.start(), m.end()] for m in re.finditer(r".*?\b\W\s?", text, re.MULTILINE)
        ]
        num_buffers = -1
        if not indefinite:
            num_buffers = max(10, len(self.ranges) + 1)
        elements = [
            "audiotestsrc num-buffers=%d wave=%s name=src"
            % (-1 if indefinite else 10, "silence" if silent else "sine"),
            "audioconvert",
            "audio/x-raw,format=S16LE,channels=1,rate=22050",
            "appsink emit-signals=True name=sink",
        ]
        self._pipeline = Gst.parse_launch(" ! ".join(elements))
        sink = self._pipeline.get_by_name("sink")
        sink.connect("new-sample", self._on_new_sample)
        sink.connect("eos", self._on_eos)

        self.stream_writer = SpielProvider.StreamWriter.new(fd)

    def _on_new_sample(self, sink):
        sample = sink.emit("pull-sample")
        buffer = sample.get_buffer()
        b = buffer.extract_dup(0, buffer.get_size())
        # Some chaos
        self.stream_writer.send_audio(b"")
        if self.ranges:
            start, end = self.ranges.pop(0)
            self.stream_writer.send_event(SpielProvider.EventType.WORD, start, end, "")
        self.stream_writer.send_audio(b)

        return Gst.FlowReturn.OK

    def end(self):
        self._pipeline.set_state(Gst.State.NULL)
        self.stream_writer.close()

    def start(self):
        self.stream_writer.send_stream_header()
        self._pipeline.set_state(Gst.State.PLAYING)

    def _on_eos(self, *args):
        self.stream_writer.close()


class SomeObject(PropertiesInterface):
    __dbus_xml__ = """<node>
<interface name="org.freedesktop.Speech.MockProvider">
    <method name="GetLastSpeakArguments">
      <arg direction="out" type="t" />
      <arg direction="out" type="s" />
      <arg direction="out" type="s" />
      <arg direction="out" type="d" />
      <arg direction="out" type="d" />
      <arg direction="out" type="b" />
    </method>
    <method name="FlushTasks">
    </method>
    <method name="SetInfinite">
      <arg direction="in"  type="b" name="val" />
    </method>
    <method name="End">
    </method>
    <method name="AddVoice">
      <arg direction="in"  type="s" name="name" />
      <arg direction="in"  type="s" name="identifier" />
      <arg direction="in"  type="as" name="languages" />
    </method>
    <method name="RemoveVoice">
      <arg direction="in"  type="s" name="identifier" />
    </method>
  </interface>
</node>"""

    def __init__(self):
        self._last_speak_args = [0, "", "", 0, 0, 0]
        self._infinite = False
        self._stream = None
        self._voices = VOICES[NAME][:]
        super().__init__()

    def Synthesize(self, fd, utterance, voice_id, pitch, rate, is_ssml):
        if utterance == "die":
            # special utterance text that makes us die
            self.byebye()
        self._last_speak_args = (fd, utterance, voice_id, pitch, rate, is_ssml)
        voice = dict([[v["identifier"], v] for v in self._voices])[voice_id]
        output_format = voice["output_format"]
        synthstream_cls = RawSynthStream
        if output_format.startswith("audio/x-spiel"):
            synthstream_cls = SpielSynthStream

        self.stream = synthstream_cls(
            fd, utterance, self._infinite, utterance == "silent"
        )
        self.stream.start()

    @property
    def Voices(self):
        if AUTOEXIT:
            GLib.timeout_add(500, self.byebye)
        voices = [
            (
                v["name"],
                v["identifier"],
                v["output_format"],
                v["features"],
                v["languages"],
            )
            for v in self._voices
        ]
        return voices

    def GetLastSpeakArguments(self):
        return self._last_speak_args

    def FlushTasks(self):
        self.stream = None
        self._last_speak_args = [0, "", "", 0, 0, 0]

    def SetInfinite(self, val):
        self._infinite = val

    def End(self):
        if self.stream:
            self.stream.end()

    def AddVoice(self, name, identifier, languages):
        self._voices.append(
            {
                "name": name,
                "identifier": identifier,
                "output_format": "audio/x-raw,format=S16LE,channels=1,rate=22050",
                "features": 0,
                "languages": languages,
            }
        )
        GLib.idle_add(self.report_changed_voices)

    def RemoveVoice(self, identifier):
        self._voices = [v for v in self._voices if v["identifier"] != identifier]
        GLib.idle_add(self.report_changed_voices)

    def report_changed_voices(self):
        self.report_changed_property("Voices")
        self.flush_changes()

    def byebye(self):
        exit()


# Add speech provider interface
dbus_xml = parseString(SomeObject.__dbus_xml__)
node = dbus_xml.getElementsByTagName("node")[0]
provider_iface_xml = parse("@provider_iface@").getElementsByTagName("interface")[0]
provider_iface_xml.parentNode.removeChild(provider_iface_xml)
node.appendChild(provider_iface_xml)
SomeObject.__dbus_xml__ = dbus_xml.toxml()

if __name__ == "__main__":
    bus = SessionMessageBus()
    bus.publish_object(
        f"/org/{NAME}/Speech/Provider", SomeObject(), server=GLibServerUnix
    )
    bus.register_service(f"org.{NAME}.Speech.Provider")

    mainloop = GLib.MainLoop()
    mainloop.run()
