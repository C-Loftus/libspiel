<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <!--
    org.freedesktop.Speech.Provider:
    @short_description: A common interface for text-to-speech providers.

    D-Bus services that implement this interface can provide speech synth
    to applications that use a client library, like `libspiel`.

    For discoverability, the service's known name **must**
    end with `Speech.Provider`. For example, `org.espeak.Speech.Provider`.
  -->
  <interface name="org.freedesktop.Speech.Provider">
  <!--
    Synthesize:
    @pipe_fd: File descriptor of pipe to write to.
    @text: The text to be spoken.
    @voice_id: The voice identifier for the voice that should be spoken.
    @pitch: The voice pitch in which the text should be spoken.
    @rate: The rate in which the text should be spoken.

    This is the basic synthesis method.
    When called, the speech provider will send the synthesized output to the given file descriptor.
    Depending on the voice's advertised format it will be raw audio or composite audio and events.

    Providers should be capable of synthesizing more than one request concurrently.
  -->
    <method name="Synthesize">
      <arg direction="in"  type="h" name="pipe_fd" />
      <arg direction="in"  type="s" name="text" />
      <arg direction="in"  type="s" name="voice_id" />
      <arg direction="in"  type="d" name="pitch" />
      <arg direction="in"  type="d" name="rate" />
    </method>

  <!--
    GetVoices:
    @voices: Array of voices.

    Retrieve a list of voices the provider can use. If the available voices change
    during the lifetime of the provider, the `VoicesChanged` signal **must** be emitted
    in order for clients to be notified and update their cache.

    Each voice in the array is structure with the following members:
    <ul>
      <li>A human readable name</li>
      <li>A unique identifier</li>
      <li>Synthesis output format</li>
      <li>A list of languages the voice support represented as BCP 47 tags</li>
    </ul>
  -->
    <method name="GetVoices">
      <arg name="voices" direction="out" type="a(sssas)" />
    </method>

  <!--
    VoicesChanged:

    Emitted when the available voices has changed.
    This allows clients to update their cached list of voices.
  -->
    <signal name="VoicesChanged">
    </signal>

    <tp:flags name="VOICE_FEATURE" type="t">
      <tp:docstring>
        A bitfield of potential voice features that can be advertised to consumers.
      </tp:docstring>
      <tp:flag suffix="NONE" value="0x0">
        <tp:docstring>
          No features
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="EVENTS_WORD" value="0x1">
        <tp:docstring>
          Provider dispatches event when about to speak word.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="EVENTS_SENTENCE" value="0x2">
        <tp:docstring>
          Provider dispatches event when about to speak sentence.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="EVENTS_RANGE" value="0x4">
        <tp:docstring>
          Provider dispatches event when about to speak unspecified range.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="EVENTS_SSML_MARK" value="0x8">
        <tp:docstring>
          Provider dispatches event when SSML mark is reached.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_DATE" value="0x10">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_TIME" value="0x20">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_TELEPHONE" value="0x40">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_CHARACTERS" value="0x80">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_CHARACTERS_GLYPHS" value="0x100">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_CARDINAL" value="0x200">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_ORDINAL" value="0x400">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SAY_AS_CURRENCY" value="0x800">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_BREAK" value="0x1000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SUB" value="0x2000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_PHONEME" value="0x4000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_EMPHASIS" value="0x8000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_PROSODY" value="0x10000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_SENTENCE_PARAGRAPH" value="0x20000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SSML_TOKEN" value="0x40000">
        <tp:docstring>
        </tp:docstring>
      </tp:flag>
    </tp:flags>
  </interface>
</node>
